在经典汉诺塔问题中，有 3 根柱子及 N 个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按升序依次套在第一根柱子上(即每一个盘子只能放在更大的盘子上面)。
移动圆盘时受到以下限制:
(1) 每次只能移动一个盘子;
(2) 盘子只能从柱子顶端滑出移到下一根柱子;
(3) 盘子只能叠在比它大的盘子上。

请编写程序，用栈将所有盘子从第一根柱子移到最后一根柱子。

你需要原地修改栈。
示例：
    输入：A = [2, 1, 0], B = [], C = []
    输出：C = [2, 1, 0]


class Solution {
    public void hanota(List<Integer> A, List<Integer> B, List<Integer> C) {
        move(A.size(),A,B,C);//传递的是对象的地址，所以不用return

    }
    //len表示转移的数目，begin是开始的柱子，mid是中转的柱子，end是目标柱子
   public static void move(int len,List<Integer> begin,List<Integer> mid, List<Integer> end){
        if(len==1){//转移数目为1时，目标list增加->开始list移除的那个数
            end.add(begin.remove(begin.size()-1));
            return;
        }
        move(len-1,begin,end,mid);//先转移最后一个上面的所有 到中间柱子上
        move(1,begin,mid,end);//将最后一个转移到目标柱子
        move(len-1,mid,begin,end);//将中间的所有转移到 目标柱子

    }
}
